name: Tests / Integration

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      lease_id:
        description: Pre-provisioned environment lease-id to use in tests
        required: false
        type: string
      lease_namespace:
        description: Pre-provisioned environment lease namespace to use in tests
        required: false
        type: string
      cfd_version:
        description: Use specific version of CFD. Leave empty to use latest.
        default: ""
        type: string

concurrency:
  group: base-image

env:
  SHEPHERD_LEASE_ID: ${{ inputs.lease_id }}

jobs:
  prepare-environment:
    name: Prepare Test Environment
    outputs:
      leaseid: ${{steps.claim.outputs.leaseid}}
      cf_deployment_version: ${{steps.claim.outputs.cf_deployment_version}}
      environment: ${{steps.claim.outputs.environment}}
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/${{ github.repository }}/base:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{needs.get-sha.outputs.gitRef}}

      - name: Restore cached environment
        id: cache-restore
        if: env.SHEPHERD_LEASE_ID == ''
        uses: actions/cache/restore@v3
        with:
          path: metadata.json
          key: shepherd-env
          restore-keys: |
            shepherd-env-

      - name: Check cached environment
        id: check-cache
        if: env.SHEPHERD_LEASE_ID == '' && steps.cache-restore.outputs.cache-hit == 'true'
        env:
          lease_namespace: ${{ inputs.lease_namespace  || vars.SHEPHERD_LEASE_NAMESPACE || 'tas-devex' }}
          account_token: ${{ secrets.SHEPHERD_SERVICE_ACCOUNT_TOKEN }}
        run: |
          set -eo pipefail
          shepherd login service-account ${account_token}
          
          cached_lease_id=$(jq -r .lease_id metadata.json || echo "")
          if [ -n "$cached_lease_id" ]; then
            echo "Checking cached lease ${cached_lease_id}"
            if lease_info=$(shepherd get lease ${cached_lease_id} --namespace ${lease_namespace} --json 2>/dev/null); then
              status=$(echo "$lease_info" | jq -r .status)
              if [ "$status" = "LEASED" ]; then
                # Check expiration time
                expiration=$(echo "$lease_info" | jq -r .expiration)
                current_time=$(date +%s)
                expiration_time=$(date -d "$expiration" +%s)
                time_remaining=$((expiration_time - current_time))
                minutes_remaining=$((time_remaining / 60))
                
                if [ $minutes_remaining -le 20 ]; then
                  echo "Cached environment expires in ${minutes_remaining} minutes, treating as expired"
                  exit 0
                fi

                # Check if lease is being used by another workflow
                if running_workflows=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=in_progress" | \
                  jq -r '.workflow_runs[] | select(.id != '${{ github.run_id }}') | .id'); then
                  
                  for workflow_id in $running_workflows; do
                    if curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      "https://api.github.com/repos/${{ github.repository }}/actions/runs/$workflow_id/jobs" | \
                      jq -e --arg lease "$cached_lease_id" '.jobs[].steps[] | select(.name=="Claim Environment") | 
                      select(.output | contains($lease))' > /dev/null; then
                      echo "Cached environment is in use by another workflow, will create new lease"
                      exit 0
                    fi
                  done
                fi
                
                echo "Found valid and available cached environment (expires in ${minutes_remaining} minutes)"
                echo "cached_lease_id=${cached_lease_id}" >> $GITHUB_OUTPUT
                echo "valid=true" >> $GITHUB_OUTPUT
              else
                echo "Cached environment status: ${status}, will create new lease"
              fi
            else
              echo "Cached lease not found or expired, will create new lease"
            fi
          fi

      - name: Claim Environment
        id: claim
        env:
          account_token:       ${{ secrets.SHEPHERD_SERVICE_ACCOUNT_TOKEN }}
          template_argument:   ${{ vars.SHEPHERD_TEMPLATE_ARGUMENT        }}
          template_name:       ${{ vars.SHEPHERD_TEMPLATE_NAME       || 'cfd-bosh-lite@1.0' }}
          template_namespace:  ${{ vars.SHEPHERD_TEMPLATE_NAMESPACE  || 'official'          }}
          lease_duration:      ${{ vars.SHEPHERD_LEASE_DURATION      || '4h'               }}
          lease_namespace:     ${{ inputs.lease_namespace  || vars.SHEPHERD_LEASE_NAMESPACE || 'tas-devex' }}
          cfd_version:         ${{ inputs.cfd_version      || vars.CFD_VERSION              || 'v29.1.0' }}
          poll_interval:       ${{ vars.SHEPHERD_POLL_INTERVAL        || '30'               }}
        run: |
          set -eo pipefail
          shepherd login service-account ${account_token}

          if [[ -n "$SHEPHERD_LEASE_ID" ]]; then
            lease_id="$SHEPHERD_LEASE_ID"
            echo "Using provided lease ID: ${lease_id}"
          elif [[ -n "${{ steps.check-cache.outputs.valid }}" ]]; then
            lease_id="${{ steps.check-cache.outputs.cached_lease_id }}"
            echo "Using cached lease: ${lease_id}"
          else
            if [ -z "$template_argument" ]; then
              read -r -d '' template_argument << EOM
          {
            "gcp_region": "us-west2",
            "vm_type": "n1-standard-8",
            "root_disk_gb": 32,
            "disk_pool_gb": 50,
            "cfd_version": "${cfd_version}",
            "additional_opsfiles_b64": ""
          }
          EOM
            fi

            lease_id=$( shepherd create lease \
              --template-argument  "$template_argument" \
              --template-namespace "${template_namespace}" \
              --template           "${template_name}" \
              --namespace          "${lease_namespace}" \
              --duration           "${lease_duration}" \
              --description "Claimed by CF CLI workflow ${{ github.workflow_run.url }}" \
              --json | jq -r .id
            )
            echo "Created new lease: ${lease_id}"
          fi

          echo "Shepherd lease ID: ${lease_id}"

          echo "::group::Waiting for Shepherd environment provisioning"
          count=0
          max_attempts=240
          
          while [ $count -lt $max_attempts ]; do
            status=$(shepherd get lease ${lease_id} --namespace ${lease_namespace} --json | jq -r .status)
            
            case $status in
              "LEASED")
                shepherd get lease ${lease_id} --namespace ${lease_namespace} --json | jq '.lease_id = "'${lease_id}'" | .' > metadata.json
                break
                ;;
              "FAILED"|"EXPIRED")
                echo "Error: Lease status is ${status}"
                exit 1
                ;;
              *)
                echo "Waiting for environment to be ready. Status: ${status}"
                sleep $poll_interval
                count=$((count + 1))
                ;;
            esac
          done
          echo "::endgroup::"

          if [ $count -eq $max_attempts ]; then
            echo "Error: Timeout waiting for environment"
            exit 1
          fi

          env_name=$(jq -r .name metadata.json)
          echo "Environment name: ${env_name}"
          echo "leaseid=${lease_id}" >> "${GITHUB_OUTPUT}"

          cf_deployment_version=$(jq -r .cf_deployment_version metadata.json)
          echo "CF Deployment version: ${cf_deployment_version}"
          echo "cf_deployment_version=${cf_deployment_version}" >> "${GITHUB_OUTPUT}"

          environment_metadata=$(jq -r . metadata.json)
          echo "environment=${environment_metadata}" >> "${GITHUB_OUTPUT}"

      - name: Cache environment metadata
        if: env.SHEPHERD_LEASE_ID == ''
        uses: actions/cache/save@v3
        with:
          path: metadata.json
          key: shepherd-env

  run-integration-tests:
    name: Run Integration Tests
    needs:
      - prepare-environment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CF_API:      ${{ fromJson(needs.prepare-environment.outputs.environment).api }}
      CF_USERNAME: ${{ fromJson(needs.prepare-environment.outputs.environment).username }}
      CF_PASSWORD: ${{ fromJson(needs.prepare-environment.outputs.environment).password }}
      TEST_ORG:    "test-org-${{ github.run_id }}"
      TEST_SPACE:  "test-space-${{ github.run_id }}"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go Environment
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
          check-latest: true

      - name: Setup Go Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ${{ github.workspace }}/go/pkg/mod
            bin/ginkgo
            build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ env.GITHUB_RUN_ID }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install CF CLI
        run: |
          curl -fsSL https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | \
            sudo gpg --dearmor -o /usr/share/keyrings/cloudfoundry-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloudfoundry-keyring.gpg] https://packages.cloudfoundry.org/debian stable main" | \
            sudo tee /etc/apt/sources.list.d/cloudfoundry.list > /dev/null
          echo "::group::Installing CF CLI"
          sudo apt-get update -qq && \
          sudo apt-get install -y --no-install-recommends cf8-cli
          echo "::endgroup::"
          cf version

      - name: Configure CF Environment
        run: |
          set -eo pipefail
          cf api --skip-ssl-validation "$CF_API"
          cf auth "$CF_USERNAME" "$CF_PASSWORD"
          
          cf create-org "$TEST_ORG"
          cf target -o "$TEST_ORG"
          cf create-space "$TEST_SPACE"
          cf target -o "$TEST_ORG" -s "$TEST_SPACE"

      - name: Install Dependencies
        run: |
          go mod download
          go mod verify
          if [ ! -f "bin/ginkgo" ]; then
            mkdir -p bin
            go build -o bin/ginkgo github.com/onsi/ginkgo/v2/ginkgo
          fi

      - name: Build Plugin
        id: build
        env:
          buildintegration: true
          CGO_ENABLED: 0
        run: |
          echo "::group::Building stack-auditor plugin"
          time ./scripts/build.sh
          echo "::endgroup::"

      - name: Execute Integration Tests
        env:
          buildintegration: true
          CGO_ENABLED: 0
        run: |
          export PATH=$PWD/bin:$PATH
          echo "::group::Running integration tests"
          time ./scripts/integration.sh
          echo "::endgroup::"

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            integration/
            scripts/
            build/
          retention-days: 5

      - name: Cleanup CF Resources
        if: always() && !env.RUNNER_DEBUG
        run: |
          set -eo pipefail
          if cf target -o "$TEST_ORG"; then
            cf delete-space "$TEST_SPACE" -f || true
            cf delete-org "$TEST_ORG" -f || true
          fi
