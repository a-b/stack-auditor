name: Integration Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      lease_id:
        description: Pre-provisioned environment lease-id to use in tests
        required: false
        type: string
      lease_namespace:
        description: Pre-provisioned environment lease namespace to use in tests
        required: false
        type: string
      cfd_version:
        description: Use specific version of CFD. Leave empty to use latest.
        default: ""
        type: string

concurrency:
  group: base-image

env:
  SHEPHERD_LEASE_ID: ${{ inputs.lease_id }}

jobs:
  claim-env:
    name: Claim Test Environment
    outputs:
      leaseid: ${{steps.claim.outputs.leaseid}}
      cf_deployment_version: ${{steps.claim.outputs.cf_deployment_version}}
      environment: ${{steps.claim.outputs.environment}}
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    container: 
      image: ghcr.io/${{ github.repository }}/base:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout cli
        uses: actions/checkout@v4
        with:
          ref: ${{needs.get-sha.outputs.gitRef}}

      - name: claim
        id: claim
        env:
          account_token:       ${{ secrets.SHEPHERD_SERVICE_ACCOUNT_TOKEN }}
          template_argument:   ${{ vars.SHEPHERD_TEMPLATE_ARGUMENT        }}
          template_name:       ${{ vars.SHEPHERD_TEMPLATE_NAME       || 'cfd-bosh-lite@1.0' }}
          template_namespace:  ${{ vars.SHEPHERD_TEMPLATE_NAMESPACE  || 'official'          }}
          lease_duration:      ${{ vars.SHEPHERD_LEASE_DURATION      || '30m'               }}
          lease_namespace:     ${{ inputs.lease_namespace  || vars.SHEPHERD_LEASE_NAMESPACE || 'tas-devex' }}
          cfd_version:         ${{ inputs.cfd_version      || vars.CFD_VERSION              || 'v29.1.0' }}
        run: |
          set -eo pipefail
          shepherd login service-account ${account_token}

          if [[ -z $SHEPHERD_LEASE_ID ]]; then
            if [ -z "$template_argument" ]; then
              export template_argument=$(cat <<EOF
          {
            "gcp_region": "us-west2",
            "vm_type": "n1-standard-8",
            "root_disk_gb": 32,
            "disk_pool_gb": 50,
            "cfd_version": "${cfd_version}",
            "additional_opsfiles_b64": ""
          }
          EOF
              )
            fi

            lease_id=$( shepherd create lease                           \
                        --template-argument  "$template_argument"     \
                        --template-namespace "${template_namespace}"  \
                        --template           "${template_name}"       \
                        --namespace          "${lease_namespace}"     \
                        --duration           "${lease_duration}"      \
                        --description "Claimed by CF CLI workflow ${{ github.workflow_run.url }}" \
                        --json \
                      | jq -r .id
                    )
          else
            lease_id=$SHEPHERD_LEASE_ID
          fi

          echo "Shepherd lease ID: ${lease_id}"

          # Give sometime for the lease to complete. Shepherd may take upto an 3 hours to create an env
          # if the pool is empty.
          count=0
          while [ $count -lt 360 ] ; do
            sleep 30
            status=$( shepherd get lease ${lease_id} \
                      --namespace ${lease_namespace} \
                      --json \
                    | jq -r .status
                  )
            if [ $status == "LEASED" ] ; then
              shepherd get lease ${lease_id} \
                --namespace ${lease_namespace} \
                --json \
              | jq .output > metadata.json
              break
            elif [ $status == "FAILED" -o $status == "EXPIRED" ] ; then
              echo "Error: Lease status is ${status}"
              exit 1
            else
              echo "Waiting for environment to be ready. Status: ${status}"
            fi
            count=$(($count+1))
          done

          if [ $count -eq 360 ]; then
            echo "Error: Timeout waiting for environment"
            exit 1
          fi

          env_name=$(jq -r .name metadata.json)
          echo "env name is ${env_name}"
          echo "leaseid=${lease_id}" >> "${GITHUB_OUTPUT}"

          cf_deployment_version=$(jq -r .cf_deployment_version metadata.json)
          echo "cf_deployment_version is ${cf_deployment_version}"
          echo "cf_deployment_version=${cf_deployment_version}" >> "${GITHUB_OUTPUT}"

          environment_metadata=$(jq -r . metadata.json)
          echo "environment=${environment_metadata}" >> "${GITHUB_OUTPUT}"

  integration-tests:
    needs:
      - claim-env
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CF_API:      ${{ fromJson(needs.claim-env.outputs.environment).api }}
      CF_USERNAME: ${{ fromJson(needs.claim-env.outputs.environment).username }}
      CF_PASSWORD: ${{ fromJson(needs.claim-env.outputs.environment).password }}
      TEST_ORG:    "test-org-${{ github.run_id }}"
      TEST_SPACE:  "test-space-${{ github.run_id }}"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
          check-latest: true

      - name: Go Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ${{ github.workspace }}/go/pkg/mod
            bin/ginkgo
            build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ env.GITHUB_RUN_ID }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install CF CLI
        run: |
          curl -fsSL https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | \
            sudo gpg --dearmor -o /usr/share/keyrings/cloudfoundry-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloudfoundry-keyring.gpg] https://packages.cloudfoundry.org/debian stable main" | \
            sudo tee /etc/apt/sources.list.d/cloudfoundry.list > /dev/null
          echo "::group::Installing CF CLI"
          sudo apt-get update -qq && \
          sudo apt-get install -y --no-install-recommends cf8-cli
          echo "::endgroup::"
          cf version

      - name: Configure CF CLI and Create Test Environment
        run: |
          set -eo pipefail
          cf api --skip-ssl-validation "$CF_API"
          cf auth "$CF_USERNAME" "$CF_PASSWORD"
          
          cf create-org "$TEST_ORG"
          cf target -o "$TEST_ORG"
          cf create-space "$TEST_SPACE"
          cf target -o "$TEST_ORG" -s "$TEST_SPACE"

      - name: Install dependencies
        run: |
          go mod download
          go mod verify
          if [ ! -f "bin/ginkgo" ]; then
            mkdir -p bin
            go build -o bin/ginkgo github.com/onsi/ginkgo/v2/ginkgo
          fi

      - name: Build plugin
        id: build
        env:
          buildintegration: true
          CGO_ENABLED: 0
        run: |
          echo "::group::Building stack-auditor plugin"
          time ./scripts/build.sh
          echo "::endgroup::"

      - name: Run integration tests
        env:
          buildintegration: true
          CGO_ENABLED: 0
        run: |
          export PATH=$PWD/bin:$PATH
          echo "::group::Running integration tests"
          time ./scripts/integration.sh
          echo "::endgroup::"

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            integration/
            scripts/
            build/
          retention-days: 5

      - name: Cleanup CF Resources
        if: always() && !env.RUNNER_DEBUG
        run: |
          set -eo pipefail
          if cf target -o "$TEST_ORG"; then
            cf delete-space "$TEST_SPACE" -f || true
            cf delete-org "$TEST_ORG" -f || true
          fi
